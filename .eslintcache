[{"D:\\Portfolio\\portfolio-main\\src\\index.js":"1","D:\\Portfolio\\portfolio-main\\src\\App.js":"2","D:\\Portfolio\\portfolio-main\\src\\components\\Background.js":"3","D:\\Portfolio\\portfolio-main\\src\\components\\Projects.js":"4","D:\\Portfolio\\portfolio-main\\src\\components\\Skills.js":"5","D:\\Portfolio\\portfolio-main\\src\\components\\Footer.js":"6","D:\\Portfolio\\portfolio-main\\src\\components\\Header.js":"7","D:\\Portfolio\\portfolio-main\\src\\components\\customHook\\CustomProject.js":"8","D:\\Portfolio\\portfolio-main\\src\\components\\Interactive.js":"9","D:\\Portfolio\\portfolio-main\\src\\components\\DisplayProjects\\Sorting.js":"10","D:\\Portfolio\\portfolio-main\\src\\components\\DisplayProjects\\Chess.js":"11"},{"size":219,"mtime":1618942994000,"results":"12","hashOfConfig":"13"},{"size":624,"mtime":1728412868236,"results":"14","hashOfConfig":"13"},{"size":1753,"mtime":1722375416666,"results":"15","hashOfConfig":"13"},{"size":2720,"mtime":1717792940425,"results":"16","hashOfConfig":"13"},{"size":1029,"mtime":1717792803626,"results":"17","hashOfConfig":"13"},{"size":1132,"mtime":1717792975168,"results":"18","hashOfConfig":"13"},{"size":731,"mtime":1728522103219,"results":"19","hashOfConfig":"13"},{"size":701,"mtime":1618942994000,"results":"20","hashOfConfig":"13"},{"size":3069,"mtime":1728688433357,"results":"21","hashOfConfig":"13"},{"size":14759,"mtime":1728604225934,"results":"22","hashOfConfig":"13"},{"size":11958,"mtime":1728701385255,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1ynn7xq",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":41,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Portfolio\\portfolio-main\\src\\index.js",[],["48","49"],"D:\\Portfolio\\portfolio-main\\src\\App.js",[],"D:\\Portfolio\\portfolio-main\\src\\components\\Background.js",[],"D:\\Portfolio\\portfolio-main\\src\\components\\Projects.js",[],"D:\\Portfolio\\portfolio-main\\src\\components\\Skills.js",[],"D:\\Portfolio\\portfolio-main\\src\\components\\Footer.js",[],"D:\\Portfolio\\portfolio-main\\src\\components\\Header.js",[],"D:\\Portfolio\\portfolio-main\\src\\components\\customHook\\CustomProject.js",[],"D:\\Portfolio\\portfolio-main\\src\\components\\Interactive.js",["50","51","52","53"],"D:\\Portfolio\\portfolio-main\\src\\components\\DisplayProjects\\Sorting.js",["54","55","56"],"import React, { useState, useEffect } from \"react\";\r\n\r\nconst Sorting = function ({onMountSort}) {\r\n  const [curArray, setCurArray] = useState([0, 1, 2, 3, 4]);\r\n  //[curArray, setCurArray] = useState([0, 1, 2, 3, 4]);\r\n  //console.log = console.warn = console.error = () => {};\r\n  //store translates in separate array\r\n  //stack of translations, animate after array is fully sorted\r\n\r\n  //const [value, setValue] = useState(5);\r\n  //const [sortPush, setSortPush] = useState({ bool: 0 });\r\n  useEffect(() => {\r\n    onMountSort([curArray, setCurArray]);\r\n  }, [onMountSort, curArray]);\r\n\r\n  let value = curArray.length;\r\n  let width = 50;\r\n  let opacity = 1;\r\n  let boxWidth = document.documentElement.clientWidth * 0.8;\r\n  if (value * width >= boxWidth * 2) {\r\n    width = Math.round(width / 4);\r\n    opacity = 0;\r\n  }\r\n  if (value * width >= boxWidth) {\r\n    width = Math.round(width / 2);\r\n    opacity = 0;\r\n  }\r\n  if (value * width < Math.max(boxWidth / 2) && width < 50) {\r\n    width = Math.round(width * 2);\r\n    opacity = 0;\r\n  }\r\n  if (width >= 50) {\r\n    width = 50;\r\n    opacity = 1;\r\n  }\r\n\r\n  function createNewArray(arrSize) {\r\n    for (var numArray = [], i = 0; i < arrSize; ++i) {\r\n      numArray[i] = i;\r\n    }\r\n    return numArray;\r\n  }\r\n\r\n  function shuffle(shufArray) {\r\n    let currentIndex = shufArray.length;\r\n\r\n    // While there remain elements to shuffle...\r\n    while (currentIndex !== 0) {\r\n      // Pick a remaining element...\r\n      let randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex--;\r\n\r\n      // And swap it with the current element.\r\n      [shufArray[currentIndex], shufArray[randomIndex]] = [\r\n        shufArray[randomIndex],\r\n        shufArray[currentIndex],\r\n      ];\r\n    }\r\n    return shufArray;\r\n  }\r\n\r\n  function sliderListener(e) {\r\n    let tempArray = createNewArray(e.target.value);\r\n    setCurArray(tempArray);\r\n  }\r\n\r\n  function shuffleArray() {\r\n    let tempArray = curArray.slice();\r\n    tempArray = shuffle(tempArray);\r\n    setCurArray(tempArray);\r\n  }\r\n\r\n  function resetTest() {\r\n    for (let i = 0; i < curArray.length; i++) {\r\n      document.getElementById(i).style.transform = `none`;\r\n    }\r\n    document.getElementById(\"shuffleButton\").disabled = false;\r\n    document.getElementById(\"sortButton\").disabled = false;\r\n    document.getElementById(\"dropdownSort\").disabled = false;\r\n    document.getElementById(\"sizeArraySlider\").disabled = false;\r\n    document.getElementById(\"Sorting\").inert = false;\r\n    document.getElementById(\"Chess\").inert = false;\r\n    document.getElementById(\"Tab 3\").inert = false;\r\n  }\r\n\r\n  //Bubble sort\r\n  function bubbleSort() {\r\n    var arr = curArray.slice();\r\n    var n = arr.length;\r\n    var i, j, temp;\r\n    var swapped;\r\n    //operations are pushed to queue to allow time for animations without messing with the sorting, its a mess\r\n    let queue = [];\r\n    for (i = 0; i < n - 1; i++) {\r\n      swapped = false;\r\n      for (j = 0; j < n - i - 1; j++) {\r\n        if (arr[j] > arr[j + 1]) {\r\n          // Swap arr[j] and arr[j+1]\r\n          temp = arr[j];\r\n          arr[j] = arr[j + 1];\r\n          arr[j + 1] = temp;\r\n          swapped = true;\r\n          queue.push({\r\n            index: j.valueOf(),\r\n            first: arr[j].valueOf(),\r\n            second: arr[j + 1].valueOf(),\r\n          });\r\n        }\r\n      }\r\n\r\n      // IF no two elements were\r\n      // swapped by inner loop, then break\r\n      if (swapped === false) break;\r\n    }\r\n    let numTranslated = [];\r\n    let count = 0;\r\n    //perform all swapping operations with animations\r\n    for (i = 0; i < queue.length; i++) {\r\n      setTimeout(() => {\r\n        if (numTranslated[queue[count].first] == null) {\r\n          numTranslated[queue[count].first] = 0;\r\n        }\r\n        if (numTranslated[queue[count].second] == null) {\r\n          numTranslated[queue[count].second] = 0;\r\n        }\r\n        document.getElementById(\r\n          queue[count].first\r\n        ).style.transitionDuration = `0.1s`;\r\n        document.getElementById(\r\n          queue[count].second\r\n        ).style.transitionDuration = `0.1s`;\r\n        document.getElementById(\r\n          queue[count].first\r\n        ).style.transform = `translateX(${\r\n          -width + width * numTranslated[queue[count].first]\r\n        }px)`;\r\n        document.getElementById(\r\n          queue[count].second\r\n        ).style.transform = `translateX(${\r\n          width + width * numTranslated[queue[count].second]\r\n        }px)`;\r\n        numTranslated[queue[count].first] =\r\n          Number(numTranslated[queue[count].first]) - 1;\r\n        numTranslated[queue[count].second] =\r\n          Number(numTranslated[queue[count].second]) + 1;\r\n        count = count + 1;\r\n      }, i * 100);\r\n    }\r\n    //get rid of transition duration to remove the 'jitter' after sorted and then set sorted array as final\r\n    setTimeout(() => {\r\n      for (i = 0; i < queue.length; i++) {\r\n        document.getElementById(queue[i].first).style.transitionDuration = `0s`;\r\n        document.getElementById(\r\n          queue[i].second\r\n        ).style.transitionDuration = `0s`;\r\n      }\r\n      let tempArray = createNewArray(arr.length);\r\n      setCurArray(tempArray);\r\n      resetTest();\r\n    }, queue.length * 100 + 200);\r\n  }\r\n\r\n  function quickSortFirst() {\r\n    let arr = curArray.slice();\r\n    let low = 0;\r\n    let high = curArray.length - 1;\r\n    let queue = [];\r\n    quickSort(arr, low, high, queue);\r\n\r\n    let numTranslated = [];\r\n    let count = 0;\r\n    var i;\r\n    let curPivot = document.getElementById(queue[count].pivot);\r\n    curPivot.style.backgroundColor = `red`;\r\n    //perform all swapping operations with animations\r\n    for (i = 0; i < queue.length; i++) {\r\n      setTimeout(() => {\r\n        if (numTranslated[queue[count].first] == null) {\r\n          numTranslated[queue[count].first] = 0;\r\n        }\r\n        if (numTranslated[queue[count].second] == null) {\r\n          numTranslated[queue[count].second] = 0;\r\n        }\r\n        let difference = queue[count].firstIndex - queue[count].secondIndex;\r\n        let newPivot = document.getElementById(queue[count].pivot);\r\n        if (newPivot !== curPivot) {\r\n          newPivot.style.backgroundColor = `red`;\r\n          curPivot.style.backgroundColor = `lightgreen`;\r\n          curPivot = newPivot;\r\n        }\r\n        document.getElementById(\r\n          queue[count].first\r\n        ).style.transitionDuration = `0.1s`;\r\n        document.getElementById(\r\n          queue[count].second\r\n        ).style.transitionDuration = `0.1s`;\r\n        document.getElementById(\r\n          queue[count].first\r\n        ).style.transform = `translateX(${\r\n          -width * difference + width * numTranslated[queue[count].first]\r\n        }px)`;\r\n        document.getElementById(\r\n          queue[count].second\r\n        ).style.transform = `translateX(${\r\n          width * difference + width * numTranslated[queue[count].second]\r\n        }px)`;\r\n        numTranslated[queue[count].first] =\r\n          Number(numTranslated[queue[count].first]) - difference;\r\n        numTranslated[queue[count].second] =\r\n          Number(numTranslated[queue[count].second]) + difference;\r\n        count = count + 1;\r\n      }, i * 200);\r\n    }\r\n    //get rid of transition duration to remove the 'jitter' after sorted and then set sorted array as final\r\n    setTimeout(() => {\r\n      curPivot.style.backgroundColor = `lightgreen`;\r\n      for (i = 0; i < queue.length; i++) {\r\n        document.getElementById(queue[i].first).style.transitionDuration = `0s`;\r\n        document.getElementById(\r\n          queue[i].second\r\n        ).style.transitionDuration = `0s`;\r\n      }\r\n      let tempArray = createNewArray(arr.length);\r\n      setCurArray(tempArray);\r\n      resetTest();\r\n    }, queue.length * 200 + 500);\r\n  }\r\n\r\n  /*\r\n  //Lomuto's Partition\r\n  function partition(arr, low, high, queue)\r\n    {\r\n        let temp;\r\n        let pivot = arr[high];\r\n  \r\n        // index of smaller element\r\n        let i = (low - 1);\r\n        for (let j = low; j <= high - 1; j++) {\r\n  \r\n            // If current element is\r\n            // smaller than or\r\n            // equal to pivot\r\n            if (arr[j] <= pivot) {\r\n                i++;\r\n  \r\n                if (arr[i] != arr[j]) {\r\n                  queue.push({first: arr[i], second: arr[j], firstIndex: i, secondIndex: j, pivot: high});\r\n                }\r\n                // swap arr[i] and arr[j]\r\n                temp = arr[i];\r\n                arr[i] = arr[j];\r\n                arr[j] = temp;\r\n            }\r\n        }\r\n  \r\n        if (arr[i+1] != arr[high]) {\r\n          queue.push({first: arr[i+1], second: arr[high], firstIndex: i+1, secondIndex: high, pivot: i+1});\r\n        }\r\n        // swap arr[i+1] and arr[high]\r\n        // (or pivot)\r\n        temp = arr[i + 1];\r\n        arr[i + 1] = arr[high];\r\n        arr[high] = temp;\r\n  \r\n        return i + 1;\r\n    }*/\r\n\r\n  //Hoare's Partition\r\n  function partition(arr, low, high, queue) {\r\n    let pivot = arr[low];\r\n    let i = low - 1,\r\n      j = high + 1;\r\n\r\n    while (true) {\r\n      // Find leftmost element greater\r\n      // than or equal to pivot\r\n      do {\r\n        i++;\r\n      } while (arr[i] < pivot);\r\n\r\n      // Find rightmost element smaller\r\n      // than or equal to pivot\r\n      do {\r\n        j--;\r\n      } while (arr[j] > pivot);\r\n\r\n      // If two pointers met\r\n      if (i >= j) return j;\r\n\r\n      // Swap arr[i] and arr[j]\r\n      queue.push({\r\n        first: arr[i],\r\n        second: arr[j],\r\n        firstIndex: i,\r\n        secondIndex: j,\r\n        pivot: arr[Math.round((low + high) / 2)],\r\n      });\r\n      [arr[i], arr[j]] = [arr[j], arr[i]];\r\n    }\r\n  }\r\n\r\n  /* The main function that implements\r\n    QuickSort() arr[] --> Array to be \r\n    sorted,\r\n    low --> Starting index,\r\n    high --> Ending index */\r\n  function quickSort(arr, low, high, queue) {\r\n    if (low < high) {\r\n      /* pi is partitioning index, \r\n            arr[pi] is now at right place */\r\n      let pi = partition(arr, low, high, queue);\r\n\r\n      // Recursively sort elements\r\n      // before partition and after\r\n      // partition\r\n      quickSort(arr, low, pi, queue);\r\n      quickSort(arr, pi + 1, high, queue);\r\n    }\r\n  }\r\n\r\n  function selectionSortFirst() {\r\n    let arr = curArray.slice();\r\n    let queue = [];\r\n    selectionSort(arr, queue);\r\n    let numTranslated = [];\r\n    let count = 0;\r\n    var i;\r\n    for (i = 0; i < queue.length; i++) {\r\n      setTimeout(() => {\r\n        if (numTranslated[queue[count].first] == null) {\r\n          numTranslated[queue[count].first] = 0;\r\n        }\r\n        if (numTranslated[queue[count].second] == null) {\r\n          numTranslated[queue[count].second] = 0;\r\n        }\r\n        let difference = queue[count].firstIndex - queue[count].secondIndex;\r\n        document.getElementById(\r\n          queue[count].first\r\n        ).style.transitionDuration = `0.1s`;\r\n        document.getElementById(\r\n          queue[count].second\r\n        ).style.transitionDuration = `0.1s`;\r\n        document.getElementById(\r\n          queue[count].first\r\n        ).style.transform = `translateX(${\r\n          -width * difference + width * numTranslated[queue[count].first]\r\n        }px)`;\r\n        document.getElementById(\r\n          queue[count].second\r\n        ).style.transform = `translateX(${\r\n          width * difference + width * numTranslated[queue[count].second]\r\n        }px)`;\r\n        numTranslated[queue[count].first] =\r\n          Number(numTranslated[queue[count].first]) - difference;\r\n        numTranslated[queue[count].second] =\r\n          Number(numTranslated[queue[count].second]) + difference;\r\n        count = count + 1;\r\n      }, i * 200);\r\n    }\r\n    setTimeout(() => {\r\n      for (i = 0; i < queue.length; i++) {\r\n        document.getElementById(queue[i].first).style.transitionDuration = `0s`;\r\n        document.getElementById(\r\n          queue[i].second\r\n        ).style.transitionDuration = `0s`;\r\n      }\r\n      let tempArray = createNewArray(arr.length);\r\n      setCurArray(tempArray);\r\n      resetTest();\r\n    }, queue.length * 200 + 500);\r\n  }\r\n\r\n  function selectionSort(arr, queue) {\r\n    let n = arr.length;\r\n    for (let i = 0; i < n - 1; i++) {\r\n    \r\n        // Assume the current position holds\r\n        // the minimum element\r\n        let min_idx = i;\r\n        \r\n        // Iterate through the unsorted portion\r\n        // to find the actual minimum\r\n        for (let j = i + 1; j < n; j++) {\r\n            if (arr[j] < arr[min_idx]) {\r\n            \r\n                // Update min_idx if a smaller element is found\r\n                min_idx = j;\r\n            }\r\n        }\r\n        \r\n        // Move minimum element to its\r\n        // correct position\r\n        queue.push({\r\n          first: arr[i],\r\n          second: arr[min_idx],\r\n          firstIndex: i,\r\n          secondIndex: min_idx,\r\n        });\r\n        let temp = arr[i];\r\n        arr[i] = arr[min_idx];\r\n        arr[min_idx] = temp;\r\n    }\r\n  }\r\n\r\n  function activateSorter() {\r\n    let selected = document.getElementById(\"dropdownSort\");\r\n    let curAlgo = selected.options[selected.selectedIndex].text;\r\n    document.getElementById(\"shuffleButton\").disabled = true;\r\n    document.getElementById(\"sortButton\").disabled = true;\r\n    document.getElementById(\"dropdownSort\").disabled = true;\r\n    document.getElementById(\"sizeArraySlider\").disabled = true;\r\n    document.getElementById(\"Sorting\").inert = true;\r\n    document.getElementById(\"Chess\").inert = true;\r\n    document.getElementById(\"Tab 3\").inert = true;\r\n    switch(curAlgo) {\r\n      case \"Bubble Sort\": bubbleSort();\r\n      break;\r\n      case \"Quick Sort\": quickSortFirst();\r\n      break;\r\n      case \"Selection Sort\": selectionSortFirst();\r\n      break;\r\n      default: console.log(\"NOT IN THE MENU?\");\r\n    }\r\n  }\r\n\r\n  //Handle all html given\r\n  return (\r\n    <div>\r\n      <button id=\"shuffleButton\" onClick={shuffleArray}>Shuffle!</button>\r\n      <button id=\"sortButton\" onClick={activateSorter}>Sort!</button>\r\n      <select id=\"dropdownSort\"><option>Bubble Sort</option><option>Quick Sort</option><option>Selection Sort</option></select>\r\n      Set Array Size!\r\n      <input\r\n        type=\"range\"\r\n        min=\"5\"\r\n        max=\"100\"\r\n        step=\"1\"\r\n        value={value}\r\n        onChange={sliderListener}\r\n        id=\"sizeArraySlider\"\r\n      ></input>\r\n      <div className=\"arrayContainer\">\r\n        {curArray.map((num, index) => (\r\n          <div\r\n            className=\"nums\"\r\n            style={{\r\n              height: `${num * 7 + 10}px`,\r\n              width: `${width}px`,\r\n            }}\r\n            key={index}\r\n            id={num}\r\n          >\r\n            <h2 style={{ opacity: `${opacity}` }}>{num}</h2>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Sorting;\r\n","D:\\Portfolio\\portfolio-main\\src\\components\\DisplayProjects\\Chess.js",["57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97"],{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","severity":1,"message":"103","line":14,"column":9,"nodeType":"104","messageId":"105","endLine":14,"endColumn":17},{"ruleId":"102","severity":1,"message":"106","line":15,"column":9,"nodeType":"104","messageId":"105","endLine":15,"endColumn":20},{"ruleId":"102","severity":1,"message":"107","line":19,"column":9,"nodeType":"104","messageId":"105","endLine":19,"endColumn":17},{"ruleId":"102","severity":1,"message":"108","line":20,"column":9,"nodeType":"104","messageId":"105","endLine":20,"endColumn":20},{"ruleId":"109","severity":1,"message":"110","line":119,"column":18,"nodeType":"111","messageId":"112","endLine":147,"endColumn":8},{"ruleId":"109","severity":1,"message":"113","line":177,"column":18,"nodeType":"111","messageId":"112","endLine":212,"endColumn":8},{"ruleId":"109","severity":1,"message":"114","line":329,"column":18,"nodeType":"111","messageId":"112","endLine":358,"endColumn":8},{"ruleId":"102","severity":1,"message":"115","line":34,"column":25,"nodeType":"104","messageId":"105","endLine":34,"endColumn":39},{"ruleId":"116","severity":1,"message":"117","line":58,"column":25,"nodeType":"118","messageId":"119","endLine":58,"endColumn":27},{"ruleId":"120","severity":1,"message":"121","line":76,"column":21,"nodeType":"122","endLine":76,"endColumn":147},{"ruleId":"120","severity":1,"message":"121","line":78,"column":16,"nodeType":"122","endLine":78,"endColumn":192},{"ruleId":"116","severity":1,"message":"123","line":112,"column":26,"nodeType":"118","messageId":"119","endLine":112,"endColumn":28},{"ruleId":"116","severity":1,"message":"123","line":116,"column":46,"nodeType":"118","messageId":"119","endLine":116,"endColumn":48},{"ruleId":"116","severity":1,"message":"117","line":117,"column":57,"nodeType":"118","messageId":"119","endLine":117,"endColumn":59},{"ruleId":"116","severity":1,"message":"117","line":129,"column":28,"nodeType":"118","messageId":"119","endLine":129,"endColumn":30},{"ruleId":"116","severity":1,"message":"117","line":132,"column":34,"nodeType":"118","messageId":"119","endLine":132,"endColumn":36},{"ruleId":"116","severity":1,"message":"117","line":132,"column":49,"nodeType":"118","messageId":"119","endLine":132,"endColumn":51},{"ruleId":"116","severity":1,"message":"117","line":133,"column":72,"nodeType":"118","messageId":"119","endLine":133,"endColumn":74},{"ruleId":"116","severity":1,"message":"123","line":139,"column":28,"nodeType":"118","messageId":"119","endLine":139,"endColumn":30},{"ruleId":"116","severity":1,"message":"123","line":139,"column":43,"nodeType":"118","messageId":"119","endLine":139,"endColumn":45},{"ruleId":"116","severity":1,"message":"117","line":146,"column":32,"nodeType":"118","messageId":"119","endLine":146,"endColumn":34},{"ruleId":"116","severity":1,"message":"117","line":153,"column":32,"nodeType":"118","messageId":"119","endLine":153,"endColumn":34},{"ruleId":"116","severity":1,"message":"123","line":160,"column":90,"nodeType":"118","messageId":"119","endLine":160,"endColumn":92},{"ruleId":"116","severity":1,"message":"117","line":170,"column":38,"nodeType":"118","messageId":"119","endLine":170,"endColumn":40},{"ruleId":"116","severity":1,"message":"117","line":170,"column":58,"nodeType":"118","messageId":"119","endLine":170,"endColumn":60},{"ruleId":"116","severity":1,"message":"117","line":170,"column":80,"nodeType":"118","messageId":"119","endLine":170,"endColumn":82},{"ruleId":"116","severity":1,"message":"117","line":170,"column":100,"nodeType":"118","messageId":"119","endLine":170,"endColumn":102},{"ruleId":"116","severity":1,"message":"123","line":175,"column":33,"nodeType":"118","messageId":"119","endLine":175,"endColumn":35},{"ruleId":"116","severity":1,"message":"117","line":187,"column":32,"nodeType":"118","messageId":"119","endLine":187,"endColumn":34},{"ruleId":"116","severity":1,"message":"117","line":190,"column":32,"nodeType":"118","messageId":"119","endLine":190,"endColumn":34},{"ruleId":"116","severity":1,"message":"123","line":193,"column":90,"nodeType":"118","messageId":"119","endLine":193,"endColumn":92},{"ruleId":"116","severity":1,"message":"123","line":202,"column":32,"nodeType":"118","messageId":"119","endLine":202,"endColumn":34},{"ruleId":"116","severity":1,"message":"123","line":202,"column":56,"nodeType":"118","messageId":"119","endLine":202,"endColumn":58},{"ruleId":"116","severity":1,"message":"123","line":202,"column":71,"nodeType":"118","messageId":"119","endLine":202,"endColumn":73},{"ruleId":"116","severity":1,"message":"117","line":206,"column":32,"nodeType":"118","messageId":"119","endLine":206,"endColumn":34},{"ruleId":"116","severity":1,"message":"117","line":206,"column":51,"nodeType":"118","messageId":"119","endLine":206,"endColumn":53},{"ruleId":"116","severity":1,"message":"117","line":218,"column":32,"nodeType":"118","messageId":"119","endLine":218,"endColumn":34},{"ruleId":"116","severity":1,"message":"117","line":221,"column":32,"nodeType":"118","messageId":"119","endLine":221,"endColumn":34},{"ruleId":"116","severity":1,"message":"123","line":224,"column":90,"nodeType":"118","messageId":"119","endLine":224,"endColumn":92},{"ruleId":"116","severity":1,"message":"117","line":258,"column":36,"nodeType":"118","messageId":"119","endLine":258,"endColumn":38},{"ruleId":"116","severity":1,"message":"117","line":260,"column":45,"nodeType":"118","messageId":"119","endLine":260,"endColumn":47},{"ruleId":"124","severity":1,"message":"125","line":260,"column":45,"nodeType":"118","messageId":"126","endLine":260,"endColumn":47},{"ruleId":"116","severity":1,"message":"123","line":260,"column":50,"nodeType":"118","messageId":"119","endLine":260,"endColumn":52},{"ruleId":"124","severity":1,"message":"127","line":260,"column":50,"nodeType":"118","messageId":"126","endLine":260,"endColumn":52},{"ruleId":"124","severity":1,"message":"125","line":260,"column":50,"nodeType":"118","messageId":"126","endLine":260,"endColumn":52},{"ruleId":"116","severity":1,"message":"117","line":260,"column":64,"nodeType":"118","messageId":"119","endLine":260,"endColumn":66},{"ruleId":"124","severity":1,"message":"127","line":260,"column":64,"nodeType":"118","messageId":"126","endLine":260,"endColumn":66},{"ruleId":"116","severity":1,"message":"123","line":267,"column":59,"nodeType":"118","messageId":"119","endLine":267,"endColumn":61},"no-native-reassign",["128"],"no-negated-in-lhs",["129"],"no-unused-vars","'curArray' is assigned a value but never used.","Identifier","unusedVar","'setCurArray' is assigned a value but never used.","'curBoard' is assigned a value but never used.","'setCurBoard' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count'.","ArrowFunctionExpression","unsafeRefs","Function declared in a loop contains unsafe references to variable(s) 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'curPivot', 'curPivot', 'curPivot', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count'.","Function declared in a loop contains unsafe references to variable(s) 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count'.","'setPlayerColor' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","Expected '!==' and instead saw '!='.","no-mixed-operators","Unexpected mix of '==' and '!='.","unexpectedMixedOperator","Unexpected mix of '!=' and '=='.","no-global-assign","no-unsafe-negation"]